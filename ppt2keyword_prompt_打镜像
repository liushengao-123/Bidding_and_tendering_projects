我需要将code_chat.py文件打镜像为服务，通过curl调用,代码在下文展示，我的需求是打docker镜像，构建服务，参考下文Dockerfile文件，编写Dockerfile文件，并给出打镜像，然后使用docker-compose.yml运行服务。
要求：
pptx_file_path、docx_file_path通过curl路径外部传入
生成的内容保存为txt文档。

代码如下：
# -*- coding: utf-8 -*-

import yaml
from pathlib import Path
import os
import requests
from flask import Flask, request, jsonify
from read_ppt import extract_text_from_pptx,read_docx


pptx_file_path='E:\project\code_delopy\关于陕西移动2023-2025年风冷型变频氟泵列间机.pptx'
extracted_text = extract_text_from_pptx(pptx_file_path)
#print(extracted_text)


docx_file_path='E:\project\code_delopy\询比范本整理\询比文件（货物类——资格后审-综合评估法）20250805.docx'
DOC_CONTEXT = read_docx(docx_file_path)
#print(DOC_CONTEXT)


class PromptManager:
    def __init__(self, file_path="E:\project\code_delopy\prompts.yaml"):
        self.prompts = yaml.safe_load(Path(file_path).read_text(encoding='utf-8'))
    
    def get_prompt(self, key):
        try:
            return self.prompts[key]
        except Exception as e:  # 正确语法：except + 异常类型 + [as 别名]
            # 异常处理逻辑（例如日志记录或错误提示）
            print(f"捕获异常: {e}")
pm = PromptManager()
#CONTEXT_CHAT = pm.get_prompt("CONTEXT_CHAT")
EXAMPLE = pm.get_prompt("EXAMPLE")
NOTE = pm.get_prompt("NOTE")
KEY_VALUE = pm.get_prompt("KEY_VALUE")


access_token="sk-uUTtsplQO7yzLVQH40682353C3B44a9bB417045f9321B563"
#MODEL_API_URL="http://172.16.81.180:3000/v1/chat/completions"
MODEL_API_URL="http://140.210.92.250:25081/v1/chat/completions"
MODEL_NAME="Qwen3-30B-A3B-Instruct-2507"
TIMEOUT=30000
DEFAULT_RESPONSE = "对不起，纠正服务暂时不可用。请稍后再试。"


app = Flask(__name__)

# @app.route('/org_recognize', methods=['POST'])
# def model_chat():
def model_chat(original_question):
    """
    使用大语言模型做场景识别

    参数:
    - original_question (str): 原始问题字符串。
    - example_list (list): 特例场景映射表，用于严格对应场景
    - informal_mapping_list (list): 口语化表达场景映射表，用于将口语化说法转换为规范的场景
    返回:
    - 最佳猜测的组织机构名称 (str)
    - HTTP状态码 (int)
    """ 
    # data = request.get_json()
    # app.logger.info(f"Received data: {data}")
    # original_question=data.get('original_question')
    data = {
        "model": MODEL_NAME,
        "messages": [
            {"role": "system",
             "content": "你是一个招投标助手,招投标文本模板大致结构是固定，需要你根据输入内容,对标书模板中${}部分内容进行填充;最后，按照键值对列表{KEY_VALUE}，返回形式如下{'key':'projectName','value':'XX项目'}键值对。"},
            {"role": "user",
             "content": f'根据内容{original_question}，填充文档中的key值模板{DOC_CONTEXT};样例如下:{EXAMPLE};{NOTE}'}
        ],
        "temperature": 0.1,
        "top_k": 2,
        "top_p": 0.75
    }

   
       
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }
    # 调用大语言模型的 API，设置超时时间
    response = requests.post(MODEL_API_URL, json=data, headers=headers, timeout=TIMEOUT)
   
    # 检查响应状态
    if response.status_code != 200:
        raise Exception(f"Model API returned status code {response.status_code}: {response.text}")
    # 解析响应数据
    response_data = response.json()
    
    #print(best_guess)
    
    try:
        best_guess = response_data.get('choices', [{}])[0].get('message', {}).get('content', DEFAULT_RESPONSE)
    except (KeyError, IndexError) as e:
        return {f"error": "Error processing model response{e}"}, 500
    
    return {"result": {"code": "200", "data": best_guess}}
    #return best_guess, 200



# 如果当前模块是主模块，则运行应用
# 这段代码说明了当前应用如何启动，以及启动时的配置参数
# if __name__ == '__main__':
#     # 启动应用，指定监听的主机接口、端口号和是否启用调试模式
#     # 0.0.0.0表示监听所有可用的网络接口，使得外部设备可以通过网络访问该应用
#     # 端口号54162是应用监听的特定端口，可以根据需要更改
#     # debug=True表示启用调试模式，这将在代码更改时自动重新启动服务器，并提供更详细的错误消息
#     app.logger.info("端口已重启-----------------------------------------------")
#     app.run(host='0.0.0.0', port=54162, debug=True)
#     app.logger.info("端口已重启-----------------------------------------------")




original_question=extracted_text
#print(original_question)
result=model_chat(original_question)
print(result)








FROM python:3.12.1-slim

# 安装系统依赖，包括 curl
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# 创建工作目录
RUN mkdir /app
WORKDIR /app

# 复制依赖文件并安装
COPY app/requirements.txt .
RUN pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple

# 复制所有应用代码到工作目录
COPY ./app /app

# 暴露端口
EXPOSE 5000

# 启动命令
CMD ["gunicorn", "-w", "4", "-b", "0.0.0.0:5000", "run:app"]



version: '3.5'
services:
  scene_recog_6_model:
    network_mode: "host"
    pull_policy: "never"  # 或者 "if_not_present"
    image: scene_recog:2.0  # 使用新构建的镜像
    # 修改这里的 command
    command: ["gunicorn", "-w", "4", "-b", "0.0.0.0:54161", "--timeout", "60000", "run:app"]
    container_name: scene_recog_6_model
    volumes:
      - /data/modelteam/tianjin_666_model/app:/app
    # ports: 
    #   - "54161:5000"  # 映射宿主机端口 54161 到容器端口 5000
    restart: unless-stopped

# networks:
#   default:
#     name: bonc
#     external: true

curl --request POST \
  --url http://172.18.0.180:54162/org_recognize \
  --header 'Accept: */*' \
  --header 'Accept-Encoding: gzip, deflate, br' \
  --header 'Connection: keep-alive' \
  --header 'User-Agent: PostmanRuntime-ApipostRuntime/1.1.0' \
  --header 'content-type: application/json' \
  --data '{
"pptx_file_path=.....",
"docx_file_path=...",
"sessionId": "4a6b834d-922c-4a5f-bfeb",
}'



curl --request POST \
  --url http://172.16.81.180:54469/process \
  --header 'Content-Type: application/json' \
  --data '{
    "pptx_file_path": "/home/liushengao/shanxi/data/关于陕西移动2023-2025年风冷型变频氟泵列间机.pptx",
    "docx_file_path": "/home/liushengao/shanxi/data/询比文件（货物类——资格后审-综合评估法）20250805.docx"
}'